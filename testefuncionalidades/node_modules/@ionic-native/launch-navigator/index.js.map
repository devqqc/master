{"version":3,"sources":["../../../src/@ionic-native/plugins/launch-navigator/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface PromptsOptions {\r\n\r\n  /**\r\n   * a function to pass the user's decision whether to remember their choice of app.\r\n   * This will be passed a single boolean value indicating the user's decision.\r\n   * @param rememberChoice\r\n   */\r\n  callback?: (rememberChoice: boolean) => void;\r\n\r\n  /**\r\n   * text to display in the native prompt header asking user whether to remember their choice.\r\n   * Defaults to \"Remember your choice?\" if not specified.\r\n   */\r\n  headerText?: string;\r\n\r\n  /**\r\n   * text to display in the native prompt body asking user whether to remember their choice.\r\n   * Defaults to \"Use the same app for navigating next time?\" if not specified.\r\n   */\r\n  bodyText?: string;\r\n\r\n\r\n  /**\r\n   * text to display for the Yes button.\r\n   * Defaults to \"Yes\" if not specified.\r\n   */\r\n  yesButtonText?: string;\r\n\r\n  /**\r\n   * text to display for the No button.\r\n   * Defaults to \"No\" if not specified.\r\n   */\r\n  noButtonText?: string;\r\n}\r\n\r\nexport interface RememberChoiceOptions {\r\n\r\n  /**\r\n   * whether to remember user choice of app for next time, instead of asking again for user choice.\r\n   * `\"prompt\"` - Prompt user to decide whether to remember choice.\r\n   *  - Default value if unspecified.\r\n   *  - If `promptFn` is defined, this will be used for user confirmation.\r\n   *  - Otherwise (by default), a native dialog will be displayed to ask user.\r\n   * `false` - Do not remember user choice.\r\n   * `true` - Remember user choice.\r\n   */\r\n  enabled?: boolean | string;\r\n\r\n\r\n  /**\r\n   * a function which asks the user whether to remember their choice of app.\r\n   * If this is defined, then the default dialog prompt will not be shown, allowing for a custom UI for asking the user.\r\n   * This will be passed a callback function which should be invoked with a single boolean argument which indicates the user's decision to remember their choice.\r\n   * @param callback\r\n   */\r\n  promptFn?: (callback: (rememberChoice: boolean) => void) => void;\r\n\r\n  /**\r\n   * options related to the default dialog prompt used to ask the user whether to remember their choice of app.\r\n   */\r\n  prompt?: PromptsOptions;\r\n}\r\n\r\nexport interface AppSelectionOptions {\r\n  /**\r\n   * text to display in the native picker which enables user to select which navigation app to launch.\r\n   * Defaults to \"Select app for navigation\" if not specified.\r\n   */\r\n  dialogHeaderText?: string;\r\n\r\n  /**\r\n   * text to display for the cancel button in the native picker which enables user to select which navigation app to launch.\r\n   * Defaults to \"Cancel\" if not specified.\r\n   */\r\n  cancelButtonText?: string;\r\n\r\n  /**\r\n   * List of apps, defined as `launchnavigator.APP` constants, which should be displayed in the picker if the app is available.\r\n   * This can be used to restrict which apps are displayed, even if they are installed.\r\n   * By default, all available apps will be displayed.\r\n   */\r\n  list?: string[];\r\n\r\n  /**\r\n   * Callback to invoke when the user selects an app in the native picker.\r\n   * A single string argument is passed which is the app what was selected defined as a `launchnavigator.APP` constant.\r\n   */\r\n  callback?: (app: string) => void;\r\n\r\n  /**\r\n   * (Android only) native picker theme. Specify using `actionsheet.ANDROID_THEMES` constants.\r\n   * Default `actionsheet.ANDROID_THEMES.THEME_HOLO_LIGHT`\r\n   */\r\n  androidTheme?: number;\r\n\r\n  /**\r\n   * options related to whether to remember user choice of app for next time, instead of asking again for user choice.\r\n   */\r\n  rememberChoice?: RememberChoiceOptions;\r\n}\r\n\r\nexport interface LaunchNavigatorOptions {\r\n\r\n  /**\r\n   * A callback to invoke when the navigation app is successfully launched.\r\n   */\r\n  successCallback?: Function;\r\n\r\n  /**\r\n   * A callback to invoke if an error is encountered while launching the app.\r\n   * A single string argument containing the error message will be passed in.\r\n   */\r\n  errorCallback?: (error: string) => void;\r\n\r\n  /**\r\n   * name of the navigation app to use for directions.\r\n   * Specify using launchnavigator.APP constants.\r\n   * e.g. `launchnavigator.APP.GOOGLE_MAPS`.\r\n   * If not specified, defaults to User Selection.\r\n   */\r\n  app?: string;\r\n\r\n  /**\r\n   * nickname to display in app for destination. e.g. \"Bob's House\".\r\n   */\r\n  destinationName?: string;\r\n\r\n  /**\r\n   * Start point of the navigation.\r\n   * If not specified, the current device location will be used.\r\n   * Either:\r\n   *  - a {string} containing the address. e.g. \"Buckingham Palace, London\"\r\n   *  - a {string} containing a latitude/longitude coordinate. e.g. \"50.1. -4.0\"\r\n   *  - an {array}, where the first element is the latitude and the second element is a longitude, as decimal numbers. e.g. [50.1, -4.0]\r\n   */\r\n  start?: string | number[];\r\n\r\n  /**\r\n   * nickname to display in app for start . e.g. \"My House\".\r\n   */\r\n  startName?: string;\r\n\r\n  /**\r\n   * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\r\n   */\r\n  transportMode?: string;\r\n\r\n  /**\r\n   * If true, debug log output will be generated by the plugin. Defaults to false.\r\n   */\r\n  enableDebug?: boolean;\r\n\r\n  /**\r\n   * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\r\n   */\r\n  extras?: any;\r\n\r\n  /**\r\n   * (Android only) mode in which to open Google Maps app.\r\n   * `launchnavigator.LAUNCH_MODE.MAPS` or `launchnavigator.LAUNCH_MODE.TURN_BY_TURN`\r\n   * Defaults to `launchnavigator.LAUNCH_MODE.MAPS` if not specified.\r\n   */\r\n  launchModeGoogleMaps?: string;\r\n\r\n  /**\r\n   * (iOS only) method to use to open Apple Maps app.\r\n   * `launchnavigator.LAUNCH_MODE.URI_SCHEME` or `launchnavigator.LAUNCH_MODE.MAPKIT`\r\n   * Defaults to `launchnavigator.LAUNCH_MODE.URI_SCHEME` if not specified.\r\n   */\r\n  launchModeAppleMaps?: string;\r\n\r\n\r\n  /**\r\n   * If true, and input location type(s) doesn't match those required by the app, use geocoding to obtain the address/coords as required. Defaults to true.\r\n   */\r\n  enableGeolocation?: boolean;\r\n\r\n  /**\r\n   * options related to the default native actionsheet picker which enables user to select which navigation app to launch if `app` is not specified.\r\n   */\r\n  appSelection?: AppSelectionOptions;\r\n}\r\n\r\nexport interface UserChoice {\r\n\r\n  /**\r\n   * Indicates whether a user choice exists for a preferred navigator app.\r\n   * @param callback - function to pass result to: will receive a boolean argument.\r\n   */\r\n  exists: (callback: (exists: boolean) => void) => void;\r\n\r\n  /**\r\n   * Returns current user choice of preferred navigator app.\r\n   * @param callback - function to pass result to: will receive a string argument indicating the app, which is a constant in `launchnavigator.APP`.\r\n   */\r\n  get: (callback: (app: string) => void) => void;\r\n\r\n  /**\r\n   * Sets the current user choice of preferred navigator app.\r\n   * @param app - app to set as preferred choice as a constant in `launchnavigator.APP`.\r\n   * @param callback - function to call once operation is complete.\r\n   */\r\n  set: (app: string, callback: () => void) => void;\r\n\r\n  /**\r\n   * Clears the current user choice of preferred navigator app.\r\n   * @param callback - function to call once operation is complete.\r\n   */\r\n  clear: (callback: () => void) => void;\r\n}\r\n\r\nexport interface UserPrompted {\r\n  /**\r\n   * Indicates whether user has already been prompted whether to remember their choice a preferred navigator app.\r\n   * @param callback - function to pass result to: will receive a boolean argument.\r\n   */\r\n  get: (callback: (exists: boolean) => void) => void;\r\n\r\n  /**\r\n   * Sets flag indicating user has already been prompted whether to remember their choice a preferred navigator app.\r\n   * @param callback - function to call once operation is complete.\r\n   */\r\n  set: ( callback: () => void) => void;\r\n\r\n  /**\r\n   * Clears flag which indicates if user has already been prompted whether to remember their choice a preferred navigator app.\r\n   * @param callback - function to call once operation is complete.\r\n   */\r\n  clear: ( callback: () => void) => void;\r\n}\r\n\r\nexport interface AppSelection {\r\n  userChoice: UserChoice;\r\n  userPrompted: UserPrompted;\r\n}\r\n\r\n/**\r\n * @name Launch Navigator\r\n * @description\r\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\r\n *\r\n * @usage\r\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\r\n *\r\n * ```typescript\r\n * import { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator';\r\n *\r\n * constructor(private launchNavigator: LaunchNavigator) { }\r\n *\r\n * ...\r\n *\r\n * let options: LaunchNavigatorOptions = {\r\n *   start: 'London, ON',\r\n *   app: LaunchNavigator.APPS.UBER\r\n * };\r\n *\r\n * this.launchNavigator.navigate('Toronto, ON', options)\r\n *   .then(\r\n *     success => console.log('Launched navigator'),\r\n *     error => console.log('Error launching navigator', error)\r\n *   );\r\n * ```\r\n * @interfaces\r\n * LaunchNavigatorOptions\r\n * PromptsOptions\r\n * RememberChoiceOptions\r\n * AppSelectionOptions\r\n * UserChoice\r\n * UserPrompted\r\n * AppSelection\r\n */\r\n@Plugin({\r\n  pluginName: 'LaunchNavigator',\r\n  plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',\r\n  pluginRef: 'launchnavigator',\r\n  repo: 'https://github.com/dpa99c/phonegap-launch-navigator',\r\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\r\n})\r\n\r\nexport class LaunchNavigator extends IonicNativePlugin {\r\n\r\n  APP: any = {\r\n    USER_SELECT: 'user_select',\r\n    APPLE_MAPS: 'apple_maps',\r\n    GOOGLE_MAPS: 'google_maps',\r\n    WAZE: 'waze',\r\n    CITYMAPPER: 'citymapper',\r\n    NAVIGON: 'navigon',\r\n    TRANSIT_APP: 'transit_app',\r\n    YANDEX: 'yandex',\r\n    UBER: 'uber',\r\n    TOMTOM: 'tomtom',\r\n    BING_MAPS: 'bing_maps',\r\n    SYGIC: 'sygic',\r\n    HERE_MAPS: 'here_maps',\r\n    MOOVIT: 'moovit'\r\n  };\r\n\r\n  TRANSPORT_MODE: any = {\r\n    DRIVING: 'driving',\r\n    WALKING: 'walking',\r\n    BICYCLING: 'bicycling',\r\n    TRANSIT: 'transit'\r\n  };\r\n\r\n  /**\r\n   * Launches navigator app\r\n   * @param destination {string|number[]} Location name or coordinates (as string or array)\r\n   * @param options {LaunchNavigatorOptions}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 2,\r\n    errorIndex: 3\r\n  })\r\n  navigate(destination: string | number[], options?: LaunchNavigatorOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Determines if the given app is installed and available on the current device.\r\n   * @param app {string}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  isAppAvailable(app: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Returns a list indicating which apps are installed and available on the current device.\r\n   * @returns {Promise<string[]>}\r\n   */\r\n  @Cordova()\r\n  availableApps(): Promise<string[]> { return; }\r\n\r\n  /**\r\n   * Returns the display name of the specified app.\r\n   * @param app {string}\r\n   * @returns {string}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getAppDisplayName(app: string): string { return; }\r\n\r\n  /**\r\n   * Returns list of supported apps on a given platform.\r\n   * @param platform {string}\r\n   * @returns {string[]}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getAppsForPlatform(platform: string): string[] { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of transport mode.\r\n   * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsTransportMode(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * Returns the list of transport modes supported by an app on a given platform.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {string[]}\r\n   */\r\n  @Cordova({ sync: true })\r\n  getTransportModes(app: string, platform: string): string[] { return; }\r\n\r\n  /**\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsDestName(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of start location.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsStart(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsStartName(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * Indicates if an app on a given platform supports specification of launch mode.\r\n   * Note that currently only Google Maps on Android does.\r\n   * @param app {string}\r\n   * @param platform {string}\r\n   * @returns {boolean}\r\n   */\r\n  @Cordova({ sync: true })\r\n  supportsLaunchMode(app: string, platform: string): boolean { return; }\r\n\r\n  /**\r\n   * @param destination {string | number[]}\r\n   * @param options {LaunchNavigatorOptions}\r\n   */\r\n  @Cordova({ sync: true })\r\n  userSelect(destination: string | number[], options: LaunchNavigatorOptions): void {}\r\n\r\n  appSelection: AppSelection;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}